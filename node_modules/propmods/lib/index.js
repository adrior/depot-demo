'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (block) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    opts = (0, _extend2.default)({}, defaultOptions, opts);

    return function classes(el) {
        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
        }

        if (el && typeof el !== 'string') {
            return classes.apply(undefined, [null, el].concat(rest));
        }

        var mods = {};
        var mix = [];

        rest.forEach(function (x) {
            if (Array.isArray(x)) {
                [].push.apply(mix, x);
            } else {
                var props = x.props;
                var state = x.state;

                var other = _objectWithoutProperties(x, ['props', 'state']);

                [props, state, other].forEach(function (ms) {
                    return (0, _extend2.default)(mods, pickMods(ms, opts));
                });
            }
        });

        return { className: buildClassName(block, el, mods, mix, opts) };
    };
};

var _extend = require('lodash/extend');

var _extend2 = _interopRequireDefault(_extend);

var _pickBy = require('lodash/pickBy');

var _pickBy2 = _interopRequireDefault(_pickBy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var defaultOptions = {
    elementDelimiter: '__',
    modDelimiter: '_',
    modValueDelimiter: '_',
    caseConversion: function caseConversion(x) {
        return x;
    }
};

function pickMods(target, opts) {
    var isValidClassName = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
    return (0, _pickBy2.default)(target, function (v, k) {
        if (v) {
            return isValidClassName.test(k + opts.modValueDelimiter + v);
        }
    });
}

function buildClassName(block, el, mods, mix, opts) {
    block = opts.caseConversion(block);
    if (el) {
        el = opts.caseConversion(el);
    }
    var base = el ? block + (opts.elementDelimiter || ELEMENT_DELIMITER) + el : block;
    var classes = Object.keys(mods).map(function (k) {
        var v = mods[k] === true ? true : opts.caseConversion(mods[k]);
        k = opts.caseConversion(k);
        var mod = v === true ? k : k + opts.modValueDelimiter + v;
        return base + opts.modDelimiter + mod;
    });
    [].push.apply(classes, mix);
    classes.unshift(base);
    if (mods.className) {
        classes.push(mods.className);
    }
    return classes.join(' ');
}