'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = Blocks;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function Blocks(_ref) {
    var Block = _ref.Block,
        Library = _ref.Library,
        logger = _ref.logger;

    return {
        create: function create(req, res) {
            var _this = this;

            return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                var library, block, result;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                library = new Library(req.params.library);
                                block = new Block(library, req.params.block);
                                _context.prev = 2;
                                _context.next = 5;
                                return block.snapshot();

                            case 5:
                                result = _context.sent;


                                res.json({
                                    result: 'Success',
                                    library: library.name,
                                    block: block.name,
                                    archived: result.archived ? result.archived.toString() : null,
                                    stable: result.stable
                                });
                                _context.next = 13;
                                break;

                            case 9:
                                _context.prev = 9;
                                _context.t0 = _context['catch'](2);

                                logger.error(_context.t0);
                                res.status(500).json({
                                    error: _context.t0.message
                                });

                            case 13:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this, [[2, 9]]);
            }))();
        }
    };
}